
SELECT c.*, o.*, oi.*
FROM customers c
LEFT JOIN orders o on c.customer_id = o.customer_id
LEFT JOIN order_items oi ON oi.order_id = o.order_id
LEFT JOIN orders.store_id ON stores.store_id
LEFT JOIN orders.staff_id ON staffs.staff_id
;

#-List each customer along with the total number of orders they have placed.-
Select c.customer_id, c.first_name, c.last_name, COUNT(o.order_id)
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;
 
 #Show all products along with their category name and brand name.
 SELECT  p.product_name, b.brand_name, c.category_name
 FROM products p
 LEFT JOIN brands b ON p.brand_id = b.brand_id
 LEFT JOIN categories c ON p.category_id = c.category_id
 ;
 #Find the total quantity of each product currently in stock across all stores
 SELECT 
    p.product_name,
    SUM(s.quantity) AS total_quantity
FROM products p
JOIN stocks s ON p.product_id = s.product_id
GROUP BY p.product_name;
 
 
 #List all orders with the customer name and the staff member who handled the order.
 SELECT o.order_id, c.customer_id, c.first_name, c.last_name, s.staff_id, s.first_name, s.last_name
 FROM orders o   
 LEFT JOIN customers c ON o.customer_id = c.customer_id
 LEFT JOIN staffs s ON o.store_id = s.store_id ;
 
 
 #10. Display all products that have never been ordered.
SELECT p.product_id,   p.product_name
FROM products p
LEFT JOIN order_items oi ON p.product_id = oi.product_id
WHERE oi.product_id IS NULL;


#Find the top 5 customers who have spent the most money (based on order_items).
SELECT 
    c.customer_id, c.first_name, c.last_name,
    SUM(oi.quantity * oi.list_price * (1 - oi.discount)) AS total_spent
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC
LIMIT 5;

#12. Show the total revenue generated by each store.
SELECT s.store_id, s.store_name, SUM(oi.quantity * oi.list_price * (1 - oi.discount)) AS TR
FROM stores s
JOIN orders o ON s.store_id = o.store_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY s.store_id, s.store_name
ORDER BY TR DESC;

#13. List all categories and the total number of products sold in each category.
SELECT c.category_id, c.category_name, SUM(oi.quantity) AS total_products_sold
FROM categories c
JOIN products p ON c.category_id = p.category_id
JOIN order_items oi ON p.product_id = oi.product_id
GROUP BY c.category_id, c.category_name
ORDER BY total_products_sold DESC;

#14. Find staff members who have handled more than 50 orders.
SELECT s.staff_id, s.first_name, s.last_name, COUNT(o.order_id) TotalOrders
FROM staffs s
JOIN orders o ON s.staff_id = o.staff_id
GROUP BY  s.staff_id, s.first_name, s.last_name
HAVING COUNT(o.order_id) > 50
ORDER BY TotalOrders DESC;


#15. Show all unshipped orders with the customer name, store name, and order date.
SELECT 
    o.order_id, c.first_name, c.last_name, s.store_name, o.order_date
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN stores s ON o.store_id = s.store_id
WHERE o.shipped_date IS NULL
ORDER BY o.order_date;


#16. List the brand with the highest number of products sold.
SELECT b.brand_id,b.brand_name, SUM(oi.quantity) AS total_sold
FROM brands b
JOIN products p ON b.brand_id = p.brand_id
JOIN order_items oi ON p.product_id = oi.product_id
GROUP BY b.brand_id, b.brand_name
ORDER BY total_sold DESC
limit 1;


#17. Display the customer who has ordered the widest variety of product categories.
SELECT c.customer_id, c.first_name, c.last_name, item_id,count(oi.quantity)
from Customer c
inner join Orders o on c.customer_id = o.customer_id
inner join order_items oi on oi.order_id = o.order_id
group by c.customer_id, c.first_name, c.last_name,item_id;

#18. For each store, show the number of distinct customers who placed orders there.
SELECT s.store_id, s.store_name, COUNT(DISTINCT o.customer_id) as distinct_customers
FROM stores s
inner join orders o ON s.store_id = o.store_id
GROUP BY s.store_id, s.store_name
ORDER BY distinct_customers DESC;

#19.Find all products that are low in stock (e.g., quantity < 5) in any store
SELECT s.store_id, p.product_id, p.product_name, st.quantity
FROM stocks st
JOIN products p ON st.product_id = p.product_id
JOIN stores s ON st.store_id = s.store_id
WHERE st.quantity < 5
ORDER BY st.quantity ASC;

#20. Show the month with the highest sales revenue and the total revenue for that month.
SELECT 
    MONTH(o.order_date) AS month,
    SUM(oi.quantity * oi.list_price * (1 - oi.discount)) AS revenue
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY MONTH(o.order_date)
ORDER BY revenue DESC
LIMIT 1;








